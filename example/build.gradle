apply plugin: 'foundation.icon.javaee'

version = '0.1.0'

// need to add this option to retrieve formal parameter names
compileJava {
    options.compilerArgs += ['-parameters']
}

dependencies {
    compileOnly("foundation.icon:javaee-api:$javaeeVersion")
    implementation("com.github.sink772:javaee-scorex:$scorexVersion")
    implementation("com.github.sink772:minimal-json:0.9.6")
    implementation project(':score-lib')

    compileOnly project(':annotation_processor')
    annotationProcessor project(':annotation_processor')

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.0")

    testImplementation project(':score-client')
    testAnnotationProcessor project(':score-client')
    testCompileOnly("foundation.icon:javaee-api:$javaeeVersion")
    testImplementation("foundation.icon:icon-sdk:$iconsdkVersion")
}

optimizedJar {
    mainClassName = 'com.iconloop.score.example.HelloWorldImpl'
    archivesBaseName = 'hello-world'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    enableDebug = true
}

deployJar {
    endpoints {
        gangnam {
            uri = 'https://gicon.net.solidwallet.io/api/v3'
            nid = 7
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 3
        }
    }
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''
    parameters {
        arg('_name', 'Alice')
    }
}

test {
    useJUnitPlatform()
    options {
        dependsOn optimizedJar
        systemProperty 'url', project.tasks.deployToLocal.uri.get()
        systemProperty 'nid', project.tasks.deployToLocal.nid.get()
        systemProperty 'keyStorePath', project.extensions.deployJar.keystore.get()
        systemProperty 'keyStorePass', project.extensions.deployJar.password.get()
        systemProperty 'scoreFilePath', tasks.optimizedJar.outputJarName
        project.extensions.deployJar.arguments.each {
            arg -> systemProperty 'params.'+arg.name, arg.value
        }
    }
}
